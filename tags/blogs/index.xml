<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs | Hardik</title>
    <link>/tags/blogs/</link>
      <atom:link href="/tags/blogs/index.xml" rel="self" type="application/rss+xml" />
    <description>Blogs</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Fri, 04 Apr 2025 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Blogs</title>
      <link>/tags/blogs/</link>
    </image>
    
    <item>
      <title>Musings While Building with LLMs</title>
      <link>/post/2025-04-04-lessons_llm/</link>
      <pubDate>Fri, 04 Apr 2025 00:00:00 +0000</pubDate>
      <guid>/post/2025-04-04-lessons_llm/</guid>
      <description>&lt;p&gt;When you are working with large language models (LLMs) to bring an idea to life, it is easy to be impressed by how quickly they can write code, generate explanations, or stitch together components. However, when you try to build something that actually works end to end—such as a real demo with frontend, backend, integrations, and even some additional features—the experience shifts dramatically.&lt;/p&gt;
&lt;p&gt;Recently, I decided to push a fun idea all the way to a functioning demo using LLMs as my main assistants. I relied on them to suggest code, fix bugs, structure the project, and more. Along the way, I discovered what works, what really does not, and a few key practices that made the whole process smoother. Even more fascinating, many of the &amp;ldquo;hacks&amp;rdquo; I stumbled upon appear to be practical workarounds for deeply understood theoretical behaviors in these models.&lt;/p&gt;
&lt;p&gt;Here are some lessons I learned the hard way, backed by a dive into research that explains why LLMs behave in certain ways.&lt;/p&gt;
&lt;h3 id=&#34;1-always-ask-for-a-directory-structure-right-at-the-start&#34;&gt;1. Always Ask for a Directory Structure Right at the Start&lt;/h3&gt;
&lt;p&gt;Before writing a single line of code, ask the LLM for a full directory structure. Without it, your project can quickly become a mess. Ask the model to detail the folders, files, and even include placeholder comments. This sets the stage and keeps both you and the model aligned on the architecture.&lt;/p&gt;
&lt;p&gt;Although not directly addressed by attention sink research, this practice relates to the LLM&amp;rsquo;s limited reasoning capacity and its tendency to lose track over time. Providing a clear, stable structure acts as an external anchor or scaffold, helping both the model and you maintain coherence throughout development. This is similar in concept to how the &lt;code&gt;&amp;lt;bos&amp;gt;&lt;/code&gt; token might anchor attention within a sequence ([1]).&lt;/p&gt;
&lt;h3 id=&#34;2-regenerate-full-files-every-few-steps-to-avoid-drift&#34;&gt;2. Regenerate Full Files Every Few Steps to Avoid Drift&lt;/h3&gt;
&lt;p&gt;LLMs are clever, but they can lose sight of the big picture quickly. As conversations continue, they might forget earlier details or begin to contradict themselves without realizing it.&lt;/p&gt;
&lt;p&gt;One effective strategy is to ask the model to regenerate the entire file after every three or four rounds of updates or modifications. Although it might feel redundant, this approach keeps everything internally consistent.&lt;/p&gt;
&lt;p&gt;Without this practice, you may find yourself fixing subtle logic errors caused by minor changes—a function name might change slightly or an earlier assumption might be silently dropped. Think of this process as refreshing the page; it helps you avoid stale or corrupted states.&lt;/p&gt;
&lt;p&gt;This technique directly combats representational collapse and the &amp;ldquo;lost in the middle&amp;rdquo; phenomenon. Research such as Barbero et al. (2024, 2025) shows that as sequences get longer or models become deeper, token representations tend to homogenize, causing distinct concepts to blend together ([1], [2]). Additionally, studies like Liu et al. (2023) demonstrate that LLMs struggle to recall or accurately use information presented in the middle of long contexts, favoring the beginning and the end ([3]). Regenerating the full file forces the model to re-encode the entire structure and logic based on the current state, effectively refreshing its internal representation and mitigating drift.&lt;/p&gt;
&lt;h3 id=&#34;3-when-the-llm-gets-stuck-step-in-and-debug-manually&#34;&gt;3. When the LLM Gets Stuck, Step In and Debug Manually&lt;/h3&gt;
&lt;p&gt;Sometimes the LLM gets stuck in a loop, suggesting similar, ineffective fixes. When this happens, take over. List all potential failure modes, guide the model through each one step by step, and clearly state what you have already tried.&lt;/p&gt;
&lt;p&gt;This issue may be a manifestation of the model getting locked into suboptimal attention patterns or being overly influenced by earlier parts of the context due to phenomena like attention sinks or representational collapse. It might struggle to distinguish between subtly different states or re-evaluate its approach. Your manual intervention and precise guidance help break this cycle by forcing the model to reconsider specific components or logic paths it might otherwise overlook. In other words, you redirect its focus away from collapsed or overly mixed representations.&lt;/p&gt;
&lt;h3 id=&#34;4-work-around-the-context-window&#34;&gt;4. Work Around the Context Window&lt;/h3&gt;
&lt;p&gt;LLMs operate within a finite context window, which limits how much information they can process coherently at any given time. Although recent models have shown remarkable progress in handling long contexts (for example, one of the key differentiators for Gemini models is their one million token context window), there is a consensus in the industry that performance degrades as the context length increases.&lt;/p&gt;
&lt;p&gt;Practical experience suggests that beyond a certain point, typically between 50,000 and 100,000 tokens, issues begin to surface. The model may start mixing information, lose track of earlier logic, or even introduce bugs that seem to appear out of nowhere.&lt;/p&gt;
&lt;p&gt;Plan your workflow with this limitation in mind. Break your project into smaller, self-contained milestones that can each be completed within a reasonable context window. Once you approach that upper limit, or if you notice obvious degradation in performance, start a fresh session. Summarize what you have accomplished so far—perhaps by copying over key files or notes—and continue from there. This practice can help you avoid the phenomenon where the project becomes &amp;ldquo;haunted&amp;rdquo; by forgotten or corrupted context.&lt;/p&gt;
&lt;h3 id=&#34;5-for-authentication-and-security-trust-external-resources&#34;&gt;5. For Authentication and Security, Trust External Resources&lt;/h3&gt;
&lt;p&gt;LLMs are notorious for generating insecure code, especially when it comes to authentication and security. While you can ask the LLM for a general flow or a rough outline, never rely solely on its implementation details. Instead, consult official documentation, use battle-tested libraries (such as Firebase or Auth0), and adhere strictly to established security best practices.&lt;/p&gt;
&lt;p&gt;Research consistently shows that LLM-generated code often contains vulnerabilities ([5]). Models are trained on vast amounts of public code, which includes insecure examples. They lack a deep understanding of security implications. Studies report high rates of misuse or vulnerabilities in generated code ([5]). Moreover, LLMs can be susceptible to prompt injection, leading to insecure outputs even from benign prompts ([4]). Human oversight and reliance on verified resources are essential.&lt;/p&gt;
&lt;h3 id=&#34;wrapping-up&#34;&gt;Wrapping Up&lt;/h3&gt;
&lt;p&gt;Building complex applications with LLMs is an exercise in navigating inherent limitations. They are incredibly powerful assistants, but not infallible oracles. Understanding why they sometimes fail—due to mechanisms like attention sinks, representational collapse, or context window effects—helps you anticipate problems and apply effective workarounds.&lt;/p&gt;
&lt;p&gt;Guide the LLM, verify its outputs (especially for security-critical code), and do not hesitate to take the lead when necessary. Let the models handle the heavy lifting, but remember that you are still the engineer steering the ship.&lt;/p&gt;
&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Barbero, F., Arroyo, Á., Gu, X., Perivolaropoulos, C., Bronstein, M., Velicković, P., &amp;amp; Pascanu, R. (2025). &lt;em&gt;Why do LLMs attend to the first token?&lt;/em&gt; arXiv preprint 
&lt;a href=&#34;https://arxiv.org/abs/2504.02732&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;arXiv:2504.02732&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Barbero, F., Banino, A., Kapturowski, S., Kumaran, D., et al. (2024). &lt;em&gt;Transformers need glasses! Information over-squashing in language tasks.&lt;/em&gt; Advances in Neural Information Processing Systems. 
&lt;a href=&#34;https://openreview.net/forum?id=Q0Q3N4QjXk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Liu, N. F., Lin, K., Hewitt, J., et al. (2023). &lt;em&gt;Lost in the Middle: How Language Models Use Long Contexts.&lt;/em&gt; arXiv preprint 
&lt;a href=&#34;https://arxiv.org/abs/2307.03172&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;arXiv:2307.03172&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;OWASP. &lt;em&gt;OWASP Top 10 for Large Language Model Applications.&lt;/em&gt; 
&lt;a href=&#34;https://owasp.org/www-project-top-10-for-large-language-model-applications/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Li, Z., et al. (2023). &lt;em&gt;Can ChatGPT Replace StackOverflow? A Study on Robustness and Reliability of Large Language Model Code Generation.&lt;/em&gt; arXiv preprint 
&lt;a href=&#34;https://arxiv.org/abs/2308.10335&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;arXiv:2308.10335&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Useful courses/blogs related to Machine Learning</title>
      <link>/post/2020-09-21-interesting_blogs/</link>
      <pubDate>Mon, 21 Sep 2020 00:00:00 +0000</pubDate>
      <guid>/post/2020-09-21-interesting_blogs/</guid>
      <description>&lt;p&gt;&lt;strong&gt;List of blogs are informative for RL/ML&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href=&#34;https://blog.ml.cmu.edu/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Machine Learning Blog at CMU&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://bair.berkeley.edu/blog/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Berkeley Artificial Intelligence Research Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;http://ai.stanford.edu/blog/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Standford AI Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://lilianweng.github.io/lil-log/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Lilian Weng blog on RL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://deepmind.com/blog&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Deep Mind Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Lectures/courses for Machine Learning&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href=&#34;https://docs.microsoft.com/en-gb/learn/paths/create-machine-learn-models/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Create machine learning models - Microsoft&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.youtube.com/playlist?list=PLoROMvodv4rMiGQp3WXShtMGgzqpfVfbU&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Stanford CS229: Machine Learning - Andrew Ng&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Linear Regression and Gradient Descent&lt;/li&gt;
&lt;li&gt;Logistic Regression&lt;/li&gt;
&lt;li&gt;Naive Bayes&lt;/li&gt;
&lt;li&gt;SVMs&lt;/li&gt;
&lt;li&gt;Kernels&lt;/li&gt;
&lt;li&gt;Decision Trees&lt;/li&gt;
&lt;li&gt;Introduction to Neural Networks&lt;/li&gt;
&lt;li&gt;Debugging ML Models&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://developers.google.com/machine-learning/crash-course/ml-intro&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Machine Learning Crash Course - Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://course18.fast.ai/ml.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Introduction to Machine Learning for Coders - Jeremy Howard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://bloomberg.github.io/foml/#homeworkslave&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Foundations of Machine Learning - Bloomberg ML EDU&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.youtube.com/playlist?list=PL8P_Z6C4GcuVQZCYf_ZnMoIWLLKGx9Mi2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tabular Data - Machine Learning University&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.youtube.com/playlist?list=PLTKMiZHVd_2KyGirGEvKlniaWeLOHhUF3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Stat 451: Intro to Machine Learning (Fall 2020) - Sebastain Raschka&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.youtube.com/playlist?list=PLqYmG7hTraZDVH599EItlEWsUOsJbAodm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Deep Mind x UCL, Reinforcement Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.youtube.com/playlist?list=PLLHTzKZzVU9e6xUfG10TkTWApKSZCzuBI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NYU Deep Learning SP21&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Neural Nets: rotation and squashing&lt;/li&gt;
&lt;li&gt;Latent Variable Energy Based Models&lt;/li&gt;
&lt;li&gt;Unsupervised Learning&lt;/li&gt;
&lt;li&gt;Generative Adversarial Networks&lt;/li&gt;
&lt;li&gt;Autoencoders&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>
